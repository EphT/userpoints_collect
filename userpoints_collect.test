<?php

/**
 * @file
 * Provides test classes for UserpointsCollect module.
 */


/**
 * UserpointsCollect base test class with various helper functions.
 */
class UserpointsCollectTestCase extends DrupalWebTestCase {

}

/**
 * API Tests.
 */
class UserpointsCollectAPITestCase extends UserpointsCollectTestCase {
  private $privileged_user;
  private $authenticated_user;
  private $start;

  /**
   * Implements getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Userpoints Collect'),
      'description' => t('Tests the userpoints_collect module for proper eligibility period calculations'),
      'group' => t('Userpoints Collect'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    parent::setUp('userpoints', 'userpoints_collect');

    $this->privileged_user = $this->drupalCreateUser(array());
    $this->authenticated_user = $this->drupalCreateUser(array());
    $this->drupalLogin($this->authenticated_user);

    // TODO: set up various group ids (tid)

  }

  /**
   * Resets the interval its its default testing parameters and
   * updates the test's $interval_settings variable
   *
   * @param $start_time
   *    the start time for the very first eligibility period
   *    default: 10 seconds from the current timestamp
   */
  function reset_intervals($start_time = NULL) {
    // if ( is_null($start_time) ) {
    //   $this->start = time();
    // }
    // else {
    //   $this->start = $start_time;
    // }
    userpoints_collect_restriction_generate_interval(NULL, $this->start, NULL, 5);
  }

  /**
   * Resets the interval to its default testing parameters and
   * updates the test's $series_settings variable
   *
   */
  function reset_series() {
    $this->start = time();
    $this->series_settings = userpoints_collect_generate_series(FALSE, FALSE, 5, 1/12);
    foreach($this->series_settings as $ts) {
      drupal_write_record('userpoints_collect_series', $ts);
    }
  }

  /**
   * Call userpoints_collect_eligibility_period() under
   * interval mode
   */
  function testUserpointsCollectIntervalEligibility() {
    variable_set('userpoints_collect_mode', 2);

    /**
     * Define interval testing settings and generate interval restriction.
     * Test settings:
     * - 5 second intervals
     * - First period starts 10 seconds from now.
     * - Last period last is 30 seconds from now.
     */
    $delay = 10;
    $start = time() + $delay;
    userpoints_collect_restriction_generate_interval(NULL, $start, $start + 30, 5);

    // Check eligibility before first period starts ($timestamp = 5 seconds before)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start - 5);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_EARLY, t("Interval calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));

    // Check eligibility at exactly the start of the first period ($timestamp = start)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE, t("Interval calculator returned correct status (ELIGIBLE) for a timestamp after first eligibility period has started."));

    // Check eligibility at exactly the end of the last period ($timestamp = 30 seconds from now)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + 30);
    debug($result);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp exactly on when last eligibility period has ended."));

    // Check eligibility after last period ends ($timestamp = 31 seconds from now)
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + 31);
    debug($result);
    $this->assertTrue($result['status'] == USERPOINTS_COLLECT_IS_NOT_ELIGIBLE, t("Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after last eligibility period has ended."));

    /**
     * Check eligibility mid-interval
     * ($timestamp = 7 seconds after start).
     * Expected result:
     *  period_start = start time + 1 interval * 5 secs/interval
     *  period_end = start time + 2 intervals * 5 secs/interval
     */
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + 7);
    debug($result);
    $this->assertTrue($result['period_start'] == $start + 1 * 5, t('Interval calculator returned correct period_start for a mid-interval timestamp.'));
    $this->assertTrue($result['period_end'] == $start + 2 * 5, t('Interval calculator returned correct period_end for a mid-interval timestamp.'));

    /**
     * Check eligibility between intervals
     * ($timestamp = 10 seconds after start. i.e. end of second interval / start of third interval)
     * Expected result:
     *  period_start = start time + 2 intervals * 5 seconds/interval
     *  period_end = start time + 3 intervals * 5 seconds/interval
     */
    $result = userpoints_collect_eligibility($this->authenticated_user, $start + 10);
    debug($result);
    $this->assertTrue($result['period_start'] == $start + 2 * 5, t("Interval calculator returned correct period_start for a timestamp between intervals."));
    $this->assertTrue($result['period_end'] == $start + 3 * 5, t("Interval calculator returned correct period_end for a timestamp between intervals."));
  }
}
