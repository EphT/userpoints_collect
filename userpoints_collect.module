<?php

/**
 * @file
 * Provides a block for users to collect points within time constraints.
 */


require_once dirname(__FILE__) . '/userpoints_collect.inc';

/**
 * Implements hook_permission().
 */
function userpoints_collect_permission() {
  return array(
    'use userpoints collect' => array(
      'title' => t('Use userpoints collect'),
      'description' => t('Allows users to use userpoints collect.'),
    ),
    'debug userpoints collect' => array(
      'title' => t('View debug userpoints collect messages.'),
      'description' => t('Allows users to use userpoints collect.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function userpoints_collect_theme() {
  return array(
    'userpoints_collect_form' => array(
      'render element' => 'form',
      'template' => 'userpoints-collect-form'
    ),
  );
}

/**
 * Implements hook_menu().
 */
function userpoints_collect_menu() {
  return array(
    'admin/config/people/userpoints/collect' => array(
      'title' => 'Collect settings',
      'description' => 'Settings for userpoints collect',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('userpoints_collect_admin_settings'),
      'access callback' => 'userpoints_admin_access',
      'access arguments' => array('administer'),
      'file' => 'userpoints_collect.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 11,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function userpoints_collect_block_info() {
  return array(
    'userpoints_collect' => array(
      'info' => t('Userpoints Collect'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function userpoints_collect_block_view($delta = '') {
  if ( $delta == 'userpoints_collect' && user_access('use userpoints collect') ) {
    return array(
      'content' => drupal_get_form('userpoints_collect_form'),
    );
  }
}

/**
 * Userpoints Collect Form.
 */
function userpoints_collect_form($form, &$form_state) {
  global $user;

  if ( userpoints_collect_access() ) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => userpoints_collect_config('submit_label'),
    );
  }
  else {
    $timeleft = userpoints_collect_eligibility_next_timeleft();

    $form['link'] = array(
      '#prefix' => '<p>',
      '#suffix' => '</p>',
      '#markup' => l(userpoints_collect_config('return_label'), userpoints_collect_config('return_url'), array('attributes' => array('class' => array('btn', 'btn-large', 'btn-primary')))),
    );

    $form['timeleft'] = array(
      '#prefix' => '<p>',
      '#suffix' => '</p>',
      '#markup' => $timeleft ? format_string(userpoints_collect_config('next_ballot_label'), array('@timeleft' => $timeleft)) : userpoints_collect_config('no_ballots_label'),
    );

    $form['#disabled'] = TRUE;
  }

  return $form;
}

/**
 * Validation Callback: Userpoints Collect Form.
 */
function userpoints_collect_form_validate($form, &$form_state) {
  // @TODO: add some sort of validation here.
}

/**
 * Submit Callback: Userpoints Collect Form.
 */
function userpoints_collect_form_submit($form, &$form_state) {
  global $user;

  userpoints_collect_add(array(
    'uid' => $user->uid,
    'points' => userpoints_collect_config('points'),
  ));

  $form_state['redirect'] = userpoints_collect_config('after_collect_path');
}

/**
 * Determine whether the user has access to collect userpoints.
 *
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 * @param $tid
 *   (optional) The Category ID or NULL.
 * @return
 *   Boolean TRUE if the account has the requested permission.
 */
function userpoints_collect_access($account = NULL, $timestamp = NULL, $tid = NULL) {
  global $user;

  if ( !isset($account) ) {
    $account = $user;
  }

  // User #1 has privileges.
  if ( $account->uid == 1 ) {
    return TRUE;
  }

  // Check if account has permission and is eligible to collect.
  $eligibility = userpoints_collect_eligibility($account, $timestamp, $tid);
  if ( user_access('use userpoints collect', $account) && $eligibility['status'] == USERPOINTS_COLLECT_IS_ELIGIBLE ) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Add points for a user.
 */
function userpoints_collect_add($params) {
  if ( userpoints_collect_access(user_load($params['uid'])) ) {
    return userpoints_userpointsapi($params);
  }

  return array(
    'status' => FALSE,
    'reason' => t('User is not eligible.'),
  );
}

/**
 * Returns an array of possible collect restriction periods.
 */
function userpoints_collect_eligibility_lengths() {
  return array(
    NULL => 'Never',
    60 => '1 minute',
    300 => '5 minutes',
    600 => '10 minutes',
    900 => '15 minutes',
    1800 => 'Half hour',
    3600 => 'One hour',
    86400 => 'One Day',
    604800 => 'One Week',
    1209600 => 'Two Weeks',
    2419200 => 'Four Weeks',
    31536000 => '365 Days',
  );
}

/**
 * Returns an array containing configuration settings.
 *
 * @param $variable
 *   A string representing a configuration variable.
 * @return
 *   A saved config variable or an array of all variables.
 */
function userpoints_collect_config($variable = NULL) {
  $config = array(
    'mode' => variable_get('userpoints_collect_mode', USERPOINTS_COLLECT_MODE_INTERVAL),
    'points' => variable_get('userpoints_collect_points', 1),
    'submit_label' => variable_get('userpoints_collect_submit_label', 'Collect now!'),
    'return_label' => variable_get('userpoints_collect_return_label', 'Back to Facebook'),
    'return_url' => variable_get('userpoints_collect_return_url', 'http://facebook.com'),
    'no_ballots_label' => variable_get('userpoints_collect_no_ballots_label', 'No more ballots remaining'),
    'next_ballot_label' => variable_get('userpoints_collect_next_ballot_label', 'Next ballot available in @timeleft'),
    'after_collect_path' => variable_get('userpoints_collect_after_collect_path', '<front>'),
  );

  return isset($config[$variable]) ? $config[$variable] : $config;
}

/**
 * Process variables for userpoints-collect-form.tpl.php
 *
 * The $variables array contains the following arguments:
 * - $form
 *
 * @see userpoints-collect-block-form.tpl.php
 */
function template_preprocess_userpoints_collect_form(&$variables) {
  $variables['userpoints_collect'] = array();
  foreach ( element_children($variables['form']) as $key ) {
    $variables['userpoints_collect'][$key] = drupal_render($variables['form'][$key]);
  }

  $variables['userpoints_collect_form'] = implode($variables['userpoints_collect']);
}
